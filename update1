<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8" />
<meta name="viewport" content="width=device-width, initial-scale=1" />
<title>TBC Rooftop Construction And Daily Expenses</title>
<style>
  body {
    font-family: Arial, sans-serif;
    max-width: 900px;
    margin: 20px auto;
    padding: 0 20px;
    background: #f9f9f9;
    color: #333;
  }
  h1 {
    text-align: center;
    margin-bottom: 1rem;
  }
  section {
    background: white;
    padding: 15px 20px;
    margin-bottom: 20px;
    border-radius: 6px;
    box-shadow: 0 2px 5px rgba(0,0,0,0.1);
  }
  h2 {
    margin-bottom: 10px;
    color: #004080;
    display: flex;
    justify-content: space-between;
    align-items: center;
  }
  ul {
    list-style: none;
    padding-left: 0;
  }
  li {
    margin-bottom: 6px;
  }
  .item {
    display: flex;
    justify-content: space-between;
    align-items: center;
  }
  .cost {
    font-weight: bold;
  }
  .status {
    margin-top: 10px;
    font-style: italic;
    color: #b33;
  }
  .status.paid {
    color: green;
    font-weight: bold;
  }
  .total {
    margin-top: 10px;
    font-weight: bold;
    font-size: 1.1rem;
  }
  .receipt-section {
    margin-top: 15px;
  }
  input[type="file"] {
    margin-top: 5px;
  }
  .receipt-link {
    margin-top: 5px;
  }
  button.status-btn {
    padding: 4px 12px;
    font-weight: bold;
    border-radius: 4px;
    border: none;
    cursor: pointer;
    background-color: #b33;
    color: white;
    transition: background-color 0.3s ease;
  }
  button.status-btn.paid {
    background-color: green;
  }
</style>
</head>
<body>

<h1>TBC Rooftop Construction And Daily Expenses</h1>

<div id="expenses-container">
  <!-- Sections will be injected here -->
</div>

<div class="total" id="grand-total"></div>

<script>
  const data = [
    {
      date: "11/02/2025",
      items: [
        { desc: "Bricks relocation", cost: 10000 },
        { desc: "Contractor wage", cost: 500 }
      ]
    },
    {
      date: "12/02/2025",
      items: [
        { desc: "Brick relocation (1500 bricks)", cost: 2200 },
        { desc: "Contractor wage", cost: 500 }
      ]
    },
    {
      date: "14/02/2025",
      items: [
        { desc: "Sand (15 bags)", cost: 830 },
        { desc: "Cement (10 bags)", cost: 5150 },
        { desc: "Contractor wage", cost: 500 }
      ]
    },
    {
      date: "15/02/2025",
      items: [
        { desc: "Cement & sand relocation", cost: 950 },
        { desc: "Super Glue", cost: 100 },
        { desc: "Barbed wire", cost: 30 },
        { desc: "Silicone", cost: 400 },
        { desc: "Board 3SS (2 pieces)", cost: 1200 },
        { desc: "Fare", cost: 100 },
        { desc: "Polythene", cost: 300 },
        { desc: "Wood bit", cost: 200 },
        { desc: "Contractor wage", cost: 1000 }
      ]
    },
    {
      date: "16/02/2025",
      items: [
        { desc: "Worker", cost: 900 },
        { desc: "Helper", cost: 700 },
        { desc: "Contractor", cost: 1000 },
        { desc: "Wood", cost: 400 },
        { desc: "Nails", cost: 50 },
        { desc: "Fare", cost: 50 }
      ]
    },
    {
      date: "18/02/2025",
      items: [
        { desc: "Worker", cost: 900 },
        { desc: "Helper (2 persons)", cost: 1400 },
        { desc: "Fare", cost: 400 },
        { desc: "Sand (15 bags)", cost: 800 }
      ]
    },
    {
      date: "03/03/2025",
      items: [
        { desc: "Toilet door", cost: 4500 },
        { desc: "Worker", cost: 1000 },
        { desc: "Contractor", cost: 1000 },
        { desc: "Steel nail", cost: 30 }
      ]
    },
    {
      date: "20/03/2025",
      items: [
        { desc: "Gas cover board", cost: 1000 }
      ]
    },
    {
      date: "25/03/2025",
      items: [
        { desc: "2 Workers", cost: 3000 },
        { desc: "1 Helper", cost: 800 },
        { desc: "1 Contractor", cost: 1000 },
        { desc: "Steel, knife, wire, fare", cost: 1350 }
      ]
    },
    {
      date: "26/03/2025",
      items: [
        { desc: "Cement (10 bags @ 55)", cost: 550 },
        { desc: "Cement (3 bags @ 520)", cost: 1560 },
        { desc: "Worker", cost: 1200 },
        { desc: "Helper", cost: 800 },
        { desc: "Contractor", cost: 1000 }
      ]
    },
    {
      date: "27/03/2025",
      items: [
        { desc: "Sand (12 bags @ 55)", cost: 660 },
        { desc: "Cement (1 bag)", cost: 520 },
        { desc: "Carrying cost", cost: 50 },
        { desc: "2 Workers", cost: 2360 },
        { desc: "2 Helpers", cost: 200 },
        { desc: "Contractor", cost: 1000 }
      ]
    },
    {
      date: "07/05/2025 (Electric Work)",
      items: [
        { desc: "Light holders (2 pcs @ 40)", cost: 80 },
        { desc: "Gang regulators (2 pcs @ 250)", cost: 500 },
        { desc: "1-Gang 2-Way Switch (1 pc)", cost: 200 },
        { desc: "Electrical pipe (30 feet)", cost: 300 },
        { desc: "Scotch tape (2 pcs @ 20)", cost: 40 },
        { desc: "Channel ¾ inch (3 pcs @ 35)", cost: 105 },
        { desc: "Channel 1 inch (1 pc)", cost: 45 },
        { desc: "Fan hooks (2 pcs @ 70)", cost: 140 },
        { desc: "1-Gang switch boxes (2 pcs @ 25)", cost: 50 },
        { desc: "4-Gang switch box (1 pc)", cost: 100 },
        { desc: "Electrical wire (1.5 mm, 250 feet)", cost: 2700 },
        { desc: "Mason/Labor charge", cost: 2500 }
      ]
    }
  ];

  const container = document.getElementById("expenses-container");
  let grandTotal = 0;

  data.forEach((day, index) => {
    const section = document.createElement("section");

    // Header with date and status toggle
    const h2 = document.createElement("h2");
    h2.textContent = day.date;

    // Status toggle button
    const statusBtn = document.createElement("button");
    statusBtn.textContent = "Mark as Paid";
    statusBtn.className = "status-btn";
    statusBtn.dataset.status = "unpaid";

    // If last day (electric work), set status to paid by default
    if (index === data.length - 1) {
      statusBtn.dataset.status = "paid";
      statusBtn.textContent = "Mark as Unpaid";
      statusBtn.classList.add("paid");
    }

    statusBtn.addEventListener("click", () => {
      if (statusBtn.dataset.status === "unpaid") {
        statusBtn.dataset.status = "paid";
        statusBtn.textContent = "Mark as Unpaid";
        statusBtn.classList.add("paid");
        statusDiv.textContent = "Status: Paid";
        statusDiv.classList.add("paid");
      } else {
        statusBtn.dataset.status = "unpaid";
        statusBtn.textContent = "Mark as Paid";
        statusBtn.classList.remove("paid");
        statusDiv.textContent = "Status: Unpaid";
        statusDiv.classList.remove("paid");
      }
    });

    h2.appendChild(statusBtn);
    section.appendChild(h2);

    // List of expenses
    const ul = document.createElement("ul");
    let dailyTotal = 0;

    day.items.forEach(item => {
      const li = document.createElement("li");
      li.className = "item";

      const descSpan = document.createElement("span");
      descSpan.textContent = item.desc;

      const costSpan = document.createElement("span");
      costSpan.textContent = "৳" + item.cost.toLocaleString();
      costSpan.className = "cost";

      li.appendChild(descSpan);
      li.appendChild(costSpan);
      ul.appendChild(li);

      dailyTotal += item.cost;
    });

    section.appendChild(ul);

    // Total cost for the day
    const totalDiv = document.createElement("div");
    totalDiv.className = "total";
    totalDiv.textContent = "Total for the day: ৳" + dailyTotal.toLocaleString();
    section.appendChild(totalDiv);

    // Receipt upload section (one file per day)
    const receiptSection = document.createElement("div");
    receiptSection.className = "receipt-section";

    const receiptLabel = document.createElement("label");
    receiptLabel.textContent = "Upload receipt (1 file only): ";
    receiptLabel.htmlFor = `receipt-${index}`;

    const receiptInput = document.createElement("input");
    receiptInput.type = "file";
    receiptInput.accept = ".pdf,.jpg,.png";
    receiptInput.id = `receipt-${index}`;
    receiptInput.title = "Upload receipt for this day";
    receiptInput.multiple = false;

    const receiptLink = document.createElement("div");
    receiptLink.className = "receipt-link";

    receiptInput.addEventListener("change", () => {
      if (receiptInput.files.length > 0) {
        receiptLink.innerHTML = `<a href="#" target="_blank">Receipt uploaded: ${receiptInput.files[0].name}</a>`;
      } else {
        receiptLink.innerHTML = "";
      }
    });

    receiptSection.appendChild(receiptLabel);
    receiptSection.appendChild(receiptInput);
    receiptSection.appendChild(receiptLink);

    section.appendChild(receiptSection);

    // Status display text
    const statusDiv = document.createElement("div");
    statusDiv.className = "status";

    // Set status text for last day to Paid
    if (index === data.length - 1) {
      statusDiv.textContent = "Status: Paid";
      statusDiv.classList.add("paid");
    } else {
      statusDiv.textContent = "Status: Unpaid";
    }
    section.appendChild(statusDiv);

    container.appendChild(section);

    grandTotal += dailyTotal;
  });

  const grandTotalDiv = document.getElementById("grand-total");
  grandTotalDiv.textContent = "Grand Total: ৳" + grandTotal.toLocaleString() + " (All Unpaid)";
</script>

</body>
</
